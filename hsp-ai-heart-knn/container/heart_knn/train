#!/usr/bin/env python

# A sample training component that trains a simple scikit-learn decision tree model.
# This implementation works in File mode and makes no assumptions about the input file names.
# Input is specified as CSV with a data point in each row and the labels in the first column.

from __future__ import print_function

import json
import os
import pickle
import sys
import traceback

import numpy as np
import pandas as pd
from sklearn import tree

# These are the paths to where SageMaker mounts interesting things in your container.
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.neighbors import KNeighborsClassifier

prefix = '/opt/ml/'

input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')
param_path = os.path.join(prefix, 'input/config/hyperparameters.json')

# This algorithm has a single channel of input data called 'training'. Since we run in
# File mode, the input files are copied to the directory specified here.
channel_name='training'
training_path = os.path.join(input_path, channel_name)

# The function to execute the training.
def train():
    print('Starting the training.')
    try:
        # Read in any hyperparameters that the user passed with the training job
        with open(param_path, 'r') as tc:
            trainingParams = json.load(tc)

        # Take the set of files and read them all into a single pandas dataframe
        input_files = [ os.path.join(training_path, file) for file in os.listdir(training_path) ]
        if len(input_files) == 0:
            raise ValueError(('There are no files in {}.\n' +
                              'This usually indicates that the channel ({}) was incorrectly specified,\n' +
                              'the data specification in S3 was incorrectly specified or the role specified\n' +
                              'does not have permission to access the data.').format(training_path, channel_name))
        raw_data = [ pd.read_csv(file, skiprows=1, header=None) for file in input_files ]
        train_data = pd.concat(raw_data)

        # labels are in the last column
        y = train_data.iloc[:,-1:]
        X = train_data.iloc[:,:-1]
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=0)

        # Here we only support a single hyperparameter. Note that hyperparameters are always passed in as
        # strings, so we need to do any necessary conversions.
        leaf_size = trainingParams.get('leaf_size', '5')
        if leaf_size is not None:
            leaf_size = int(leaf_size)
        n_neighbors = trainingParams.get('n_neighbors', '15')
        if n_neighbors is not None:
            n_neighbors = int(n_neighbors)
        power = trainingParams.get('p', 1)
        if power is not None:
            power = int(power)
        metric = trainingParams.get('metric', 'minkowski')
        n_jobs = trainingParams.get('n_jobs', None)
        if n_jobs is not None:
            n_jobs = int(n_jobs)

        # Now use scikit-learn's knn classifier to training the model.
        knn = KNeighborsClassifier(n_neighbors=n_neighbors,
                                   leaf_size=leaf_size,
                                   p=power,
                                   metric=metric,
                                   n_jobs=n_jobs)
        clf = knn.fit(X_train, y_train.values.ravel())

        # Test on 33% data to check the score
        print('Validating model.')
        y_pred = clf.predict(X_test)
        print('Creating confusion matrix.')
        cm = confusion_matrix(y_test, y_pred)
        print(cm)
        score = knn.score(X_test, y_test)
        print('kNN Model Accuracy: {}'.format(score))

        # save the model
        with open(os.path.join(model_path, 'hsp-heart-knn-model.pkl'), 'wb') as out:
            pickle.dump(clf, out)
        print('Training complete.')
    except Exception as e:
        # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' + str(e) + '\n' + trc, file=sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)

if __name__ == '__main__':
    train()

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)